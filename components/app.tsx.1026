'use client';

import LoginGate from '@/components/LoginGate';
import { useEffect, useMemo, useState } from 'react';
import { Room, RoomEvent } from 'livekit-client';
import { motion } from 'motion/react';
import { RoomAudioRenderer, RoomContext, StartAudio } from '@livekit/components-react';
import { toastAlert } from '@/components/alert-toast';
import { SessionView } from '@/components/session-view';
import { Toaster } from '@/components/ui/sonner';
import { Welcome } from '@/components/welcome';
import useConnectionDetails from '@/hooks/useConnectionDetails';
import type { AppConfig } from '@/lib/types';

const MotionWelcome = motion.create(Welcome);
const MotionSessionView = motion.create(SessionView);

interface AppProps {
  appConfig: AppConfig;
}

export function App({ appConfig }: AppProps) {
  // 恢复 room 的创建（之前缺失导致 runtime error）
  const room = useMemo(() => new Room(), []);

  const [sessionStarted, setSessionStarted] = useState(false);
  const [selectedParticipantName, setSelectedParticipantName] = useState<string | undefined>(undefined);
  const [language, setLanguage] = useState<string>('普通话');

  const { refreshConnectionDetails, existingOrRefreshConnectionDetails } =
    useConnectionDetails(appConfig);

  useEffect(() => {
    const onDisconnected = () => {
      setSessionStarted(false);
      refreshConnectionDetails();
    };
    const onMediaDevicesError = (error: Error) => {
      toastAlert({
        title: 'Encountered an error with your media devices',
        description: `${error.name}: ${error.message}`,
      });
    };
    room.on(RoomEvent.MediaDevicesError, onMediaDevicesError);
    room.on(RoomEvent.Disconnected, onDisconnected);
    return () => {
      room.off(RoomEvent.Disconnected, onDisconnected);
      room.off(RoomEvent.MediaDevicesError, onMediaDevicesError);
    };
  }, [room, refreshConnectionDetails]);

  useEffect(() => {
    let aborted = false;
    if (sessionStarted && room.state === 'disconnected') {
      Promise.all([
        room.localParticipant.setMicrophoneEnabled(true, undefined, {
          preConnectBuffer: appConfig.isPreConnectBufferEnabled,
        }),
        existingOrRefreshConnectionDetails().then((connectionDetails) =>
          room.connect(connectionDetails.serverUrl, connectionDetails.participantToken)
        ),
      ]).catch((error) => {
        if (aborted) {
          // drop errors from aborted runs
          return;
        }

        toastAlert({
          title: 'There was an error connecting to the agent',
          description: `${error.name}: ${error.message}`,
        });
      });
    }
    return () => {
      aborted = true;
      room.disconnect();
    };
  }, [room, sessionStarted, appConfig.isPreConnectBufferEnabled, existingOrRefreshConnectionDetails]);

  // 从 appConfig 中读取左右按钮文本（如果没有则回退到默认）
  const startLeft = (appConfig as any).startButtonTextLeft ?? '禹亭';
  const startRight = (appConfig as any).startButtonTextRight ?? '小白';

  // 处理来自 Welcome 的回调：接收 participantName 与 language，然后开始 session（保留原有行为）
  const handleStartCall = (participantName: string, lang: string) => {
    setSelectedParticipantName(participantName);
    setLanguage(lang);

    // 为最小侵入性兼容：尝试覆盖 appConfig.startButtonText（若 app 代码依赖此字段）
    try {
      (appConfig as any).startButtonText = participantName ?? (appConfig as any).startButtonText;
    } catch {
      // 忽略只读或受保护的情况
    }

    setSessionStarted(true);
  };

  return (
    <LoginGate>
      <main>
        <MotionWelcome
          key="welcome"
          // 传入左右按钮文本
          startButtonTextLeft={startLeft}
          startButtonTextRight={startRight}
          // 新的回调签名 (name, language)
          onStartCall={(name: string, lang: string) => handleStartCall(name, lang)}
          disabled={sessionStarted}
          initial={{ opacity: 1 }}
          animate={{ opacity: sessionStarted ? 0 : 1 }}
          transition={{ duration: 0.5, ease: 'linear', delay: sessionStarted ? 0 : 0.5 }}
        />

        <RoomContext.Provider value={room}>
          <RoomAudioRenderer />
          <StartAudio label="Start Audio" />
          {/* --- */}
          <MotionSessionView
            key="session-view"
            appConfig={appConfig}
            disabled={!sessionStarted}
            sessionStarted={sessionStarted}
            initial={{ opacity: 0 }}
            animate={{ opacity: sessionStarted ? 1 : 0 }}
            transition={{
              duration: 0.5,
              ease: 'linear',
              delay: sessionStarted ? 0.5 : 0,
            }}
          />
        </RoomContext.Provider>

        <Toaster />
      </main>
    </LoginGate>
  );
}
